/********************************************************
Snowflakes WiFi 
  A2_WriteTest
    write a test pattern into the EEPROM
********************************************************/

//Toggle =======================================================================================================
//2Reps
uint8_t Toggle2Reps[] =
{
  0x90, 0x02, 0x54, 0x4F, 0x47, 0x47, 0x20, 0x2E, 0x35, 0x73
};

//0x22  off
//0x23  on
uint8_t ToggleProfiles[] =
{  
  0x80, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x23, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//0x0032 = 0.5sec
uint8_t TogglePattern[] =
{
  0x81, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x00, 0x32,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x22, 0x23, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x32
};

//All Dim ======================================================================================================
//0Reps
uint8_t AllDim0Reps[] =
{
  0x90, 0x00, 0x41, 0x4C, 0x4C, 0x44, 0x49, 0x4D, 0x33, 0x73
};

//Intensity = (square root of 2) to the nth power
//  where n = flake number, starting with 1
uint8_t AllDimProfiles[] =
{
  0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x06, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x08, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0A, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0B, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0C, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0D, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0E, 0xB5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//0x012C = 3sec
uint8_t AllDimPattern[] =
{
  0x81, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x2C
};

//Blink Off Once ================================================================================================
//0Reps
uint8_t BlinkOffOnce0Reps[] =
{
  0x90, 0x00, 0x31, 0x2D, 0x4F, 0x46, 0x46, 0x20, 0x31, 0x73
};

//0x00 full on
//0x01 once off for 1 sec = 0x0064, then dim
uint8_t BlinkOffOnceProfiles[] =
{
  0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64
};

//full on for 1 sec = 0x0064
//(once off for 1 sec then dim for 1 sec) = 2sec = 0x00C8
uint8_t BlinkOffOncePattern[] =
{
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
  0x81, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0xC8
};

//Blink On Once ================================================================================================
//0Reps
uint8_t BlinkOnOnce0Reps[] =
{
  0x90, 0x00, 0x31, 0x2D, 0x4F, 0x4E, 0x20, 0x31, 0x73, 0x20
};

//0x03 once on 0 sec delay 2 sec on = 0x00C8
//0x04 once on 1 sec delay 1 sec on = 0x0064
uint8_t BlinkOnOnceProfiles[] =
{
  0x80, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00,
  0x80, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00
};

//once on and delay once on for 3 sec = 0x012C
uint8_t BlinkOnOncePattern[] =
{
  0x81, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x01, 0x2C
};

//Blink ========================================================================================================
//0Reps
uint8_t Blink0Reps[] =
{
  0x90, 0x00, 0x42, 0x4C, 0x49, 0x4E, 0x4B,0x2E, 0x35, 0x73
};

//0x01 blink dim  0 sec delay .5 sec full, .5 sec half = 0x0032
//0x02 blink dim .5 sec delay .5 sec half, .5 sec off = 0x0032
uint8_t BlinkProfiles[] =
{
  0x80, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x32,
  0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32
};

//blink and delay blink for 3 sec = 0x012C
uint8_t BlinkPattern[] =
{
  0x81, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x2C
};

//Ramp Up ======================================================================================================
//0Reps
uint8_t RampUp0Reps[] =
{
  0x90, 0x00, 0x52, 0x41, 0x4D, 0x50, 0x55, 0x50, 0x33, 0x73
};

//0x01 ramp up 0% to 100% in 2.5 sec = 0x00FA
uint8_t RampUpProfiles[] =
{
  0x80, 0x01, 0x01, 0xFE, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//ramp up for 3 sec = 0x012C
uint8_t RampUpPattern[] =
{
  0x81, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0x01, 0x2C
};

//Ramp Down ====================================================================================================
//0Reps
uint8_t RampDown0Reps[] =
{
  0x90, 0x00, 0x52, 0x41, 0x4D, 0x50, 0x44, 0x4E, 0x33, 0x73
};

//0x01 ramp down 100% to 0% in 2.5 sec = 0x00FA
uint8_t RampDownProfiles[] =
{
  0x80, 0x01, 0xFE, 0x01, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//ramp down for 3 sec = 0x012C
uint8_t RampDownPattern[] =
{
  0x81, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0X01, 0x01, 0x2C
};

//Shoot ========================================================================================================
//0Reps
uint8_t Shoot1Rep[] =
{
  0x90, 0x01, 0x53, 0x48, 0x4F, 0x4F, 0x54, 0x20, 0x31, 0x73
};

//0x00  off
//0x01  on
uint8_t ShootProfiles[] =
{
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//shoot for 0x0001 = 10ms * 16 = 160ms
//off for 0x0054 = 840 ms
//shoot for 0x0002 = 20ms * 16 = 320ms
//off for 0x0044 = 680 ms
//shoot for 0x0004 = 40ms * 16 = 640ms
//off for 0x0024 = 360 ms
uint8_t ShootPattern[] =
{
  0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54,

  0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,

  0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04,
  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24
};

//end of table ================================================================================================
uint8_t EndTable[] =
{
  0x91
}; 

//table =======================================================================================================
uint8_t *Data[] = 
{
  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    AllDim0Reps,
    AllDimProfiles,
    AllDimPattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    BlinkOffOnce0Reps,
    BlinkOffOnceProfiles,
    BlinkOffOncePattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    BlinkOnOnce0Reps,
    BlinkOnOnceProfiles,
    BlinkOnOncePattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    Blink0Reps,
    BlinkProfiles,
    BlinkPattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    RampUp0Reps,
    RampUpProfiles,
    RampUpPattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    RampDown0Reps,
    RampDownProfiles,
    RampDownPattern,

  Toggle2Reps,
  ToggleProfiles,
  TogglePattern,
    Shoot1Rep,
    ShootProfiles,
    ShootPattern,

  EndTable
};

uint32_t Length[] =
{
  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(AllDim0Reps),
    sizeof(AllDimProfiles),
    sizeof(AllDimPattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(BlinkOffOnce0Reps),
    sizeof(BlinkOffOnceProfiles),
    sizeof(BlinkOffOncePattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(BlinkOnOnce0Reps),
    sizeof(BlinkOnOnceProfiles),
    sizeof(BlinkOnOncePattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(Blink0Reps),
    sizeof(BlinkProfiles),
    sizeof(BlinkPattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(RampUp0Reps),
    sizeof(RampUpProfiles),
    sizeof(RampUpPattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(RampDown0Reps),
    sizeof(RampDownProfiles),
    sizeof(RampDownPattern),

  sizeof(Toggle2Reps),
  sizeof(ToggleProfiles),
  sizeof(TogglePattern),
    sizeof(Shoot1Rep),
    sizeof(ShootProfiles),
    sizeof(ShootPattern),

  sizeof(EndTable)
};

//code ========================================================================================================
void WriteTestData(void)
{
  uint8_t Index;
  uint32_t WriteAddress;
  
  //loop to initialize tables
  Index = 0;
  WriteAddress = StartTableAddress;
  while(Index < (sizeof(Data)) / (sizeof(uint8_t *)))
  {
    // write to EEPROM
    WriteEeprom(WriteAddress, Data[Index], Length[Index]);

    //next
    WriteAddress += Length[Index];
    Index +=1;
  }

  //print message
  Serial.print(WriteTestDataDoneMessage());
}

//=============================================================================================================





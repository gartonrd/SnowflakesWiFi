//Snowflakes WiFi 
//  WriteTestData()
//    see Data[] below for test pattern contents
//  
//    18Feb2016  Dean Garton
//      write a test pattern into the EEPROM

//profiles ====================================================================================================
//0x00  dim 0% (off)
//0x01  dim 6.25%
// -    dim
//0x0F  dim 93.75%
//0x10  dim 100% (on)
//
//0x11  blink .8 sec on, .8 sec off = 0x08
//0x12  blink on once for 2.4 sec   = 0x18
//0x13  blink off once for 4.8 sec  = 0x30
//
//0x14  ramp up   0%   to 100% in 3 sec
//0x15  ramp down 100% to 10%  in 3 sec
//0x16  ramp up   10%  to 30%  in 3 sec
//0x17  ramp down 30%  to 0%   in 3 sec

uint8_t Profiles[] =
{
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x50, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x90, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xA0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xB0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xD0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xF0, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0x00, 0x00, 0x00, 0x00,

  0x80, 0x80, 0x00, 0x00, 0x08, 0x08,
  0x80, 0x40, 0x00, 0x00, 0x18, 0x00,
  0x80, 0x40, 0x00, 0x00, 0x00, 0x30,
  
  0x80, 0x00, 0xFF, 0x1E, 0x00, 0x00,
  0x80, 0xFF, 0x19, 0x1E, 0x00, 0x00,
  0x80, 0x19, 0x4B, 0x1E, 0x00, 0x00,
  0x80, 0x4B, 0x00, 0x1E, 0x00, 0x00
};
//=============================================================================================================

//start of patterns ===========================================================================================
//Toggle
//3Reps 100Scale
uint8_t Toggle3Reps100scale[] =
{
  0x90, 0x03, 0x64, 0x54, 0x4F, 0x47, 0x47, 0x20, 0x31, 0x73, 0x20
};

//Toggle
//3Reps 50Scale
//(0x0A) (0x32/0x64) = (10*100ms) (50/100) = ((10*50)/10)*(10ms) = (50)*(10ms) = .5s
uint8_t Toggle3Reps50scale[] =
{
  0x90, 0x03, 0x32, 0x54, 0x4F, 0x47, 0x47, 0x20, 0x2E, 0x35, 0x73,
};

//Toggle
//3Reps 255Scale
//(0x0A) (0xFF/0x64) = (10*100ms) (255/100) = ((10*255)/10)*(10ms) = (255)*(10ms) = 2.55s
uint8_t Toggle3Reps255scale[] =
{
  0x90, 0x03, 0xFF, 0x54, 0x4F, 0x47, 0x47, 0x20, 0x32, 0x73, 0x20,
};

//AllDim
//0Reps 100Scale
uint8_t AllDim0Reps100Scale[] =
{
  0x90, 0x00, 0x64, 0x41, 0x4C, 0x4C, 0x20, 0x44, 0x49, 0x4D, 0x20
};

//Blink
//0Reps 100Scale
uint8_t Blink0Reps100Scale[] =
{
  0x90, 0x00, 0x64, 0x42, 0x4C, 0x49, 0x4E, 0x4B, 0x20, 0x31, 0x73
};

//Blink
//0Reps 1Scale
//(0x08) (0x01/0x64) = (8*100ms) (1/100) = ((8*1)/10)*(10ms) = (0)*(10ms) => (1)*10ms) = 10ms (SF1)
//(0x18) (0x01/0x64) = (24*100ms) (1/100) = ((24*1)/10)*(10ms) = (2)*(10ms) => 20ms (SF2)
//(0x30) (0x01/0x64) = (48*100ms) (1/100) = ((48*1)/10)*(10ms) = (4)*(10ms) => 40ms (SF3)
//(0x54) (0x01/0x64) = (84*100ms) (1/100) = ((84*1)/10)*(10ms) = (8)*(10ms) => 80ms (pattern)
uint8_t Blink0Reps1Scale[] =
{
  0x90, 0x00, 0x01, 0x42, 0x4C, 0x49, 0x4E, 0x4B, 0x2E, 0x31, 0x73
};

//Ramp
//0Reps 100Scale
uint8_t Ramp0Reps100Scale[] =
{
  0x90, 0x00, 0x64, 0x52, 0x41, 0x4D, 0x50, 0x20, 0x34, 0x73, 0x20
};

//Walk
//0Reps 50Scale
//(0x1A) (0x32/0x64) = (26*100ms) (.50) = 1.3sec
//(0x0A) (0x32/0x64) = (10*100ms) (.50) = 0.5sec
/*
uint8_t Walk0Reps50Scale[] =
{
  0x90, 0x00, 0x32, 0x57, 0x41, 0x4C, 0x4B, 0x20, 0x20, 0x20, 0x20
};
*/
//=============================================================================================================

//=============================================================================================================

//patterns ====================================================================================================
//Toggle
//0x0A = 1sec
uint8_t Toggle[] =
{
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A
};

//All Dim
//0x1E = 3sec
uint8_t AllDim[] =
{
  0x81, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x1E
};

//Blink
//0x54 = 8.4sec
uint8_t Blink[] =
{
  0x81, 0x11, 0x12, 0x13, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x54
};

//Ramp
//0x28 = 4s
uint8_t Ramp[] =
{
  0x81, 0x14, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x28,
  0x81, 0x15, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x28,
  0x81, 0x16, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x28,
  0x81, 0x17, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x28
};

//Walk
//0x1A = 2.6sec
//0x0A = 1sec
/*
uint8_t WalkPattern[] =
{
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x19,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0x18,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0x17,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0x16,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0x15,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x14,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x13,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x12,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x11,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
  0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E,
  0x81, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0D,
  0x81, 0xFF, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C,
  0x81, 0xFF, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B,
  0x81, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A
};
*/

//=============================================================================================================//end of table ================================================================================================
uint8_t EndTable[] =
{
  0x91
}; 

//table =======================================================================================================
uint8_t *Data[] = 
{
  Profiles,
  
  Toggle3Reps100scale,
  Toggle,
    AllDim0Reps100Scale,
    AllDim,

  Toggle3Reps100scale,
  Toggle,
    Blink0Reps100Scale,
    Blink,
  Toggle3Reps50scale,
  Toggle,
    Blink0Reps1Scale,
    Blink,

  Toggle3Reps255scale,
  Toggle,
    Ramp0Reps100Scale,
    Ramp,

/*
  Walk0Reps50Scale,
  WalkPattern,
*/
  
  EndTable
};

uint32_t Length[] =
{
  sizeof(Profiles), 
  
  sizeof(Toggle3Reps100scale),
  sizeof(Toggle),
    sizeof(AllDim0Reps100Scale),
    sizeof(AllDim),

  sizeof(Toggle3Reps100scale),
  sizeof(Toggle),
    sizeof(Blink0Reps100Scale),
    sizeof(Blink),
  sizeof(Toggle3Reps50scale),
  sizeof(Toggle),
    sizeof(Blink0Reps1Scale),
    sizeof(Blink),

  sizeof(Toggle3Reps255scale),
  sizeof(Toggle),
    sizeof(Ramp0Reps100Scale),
    sizeof(Ramp),
  
/*
  sizeof(Walk0Reps50Scale),
  sizeof(WalkPattern),
*/

  sizeof(EndTable)
};
//=============================================================================================================

//code ========================================================================================================
void WriteTestData(void)
{
  uint8_t Index;
  uint32_t WriteAddress;
  
  //loop to initialize tables
  Index = 0;
  WriteAddress = 0;
  while(Index < (sizeof(Data)) / (sizeof(uint8_t *)))
  {
    // write to EEPROM
    WriteEeprom(WriteAddress, Data[Index], Length[Index]);

    //next
    WriteAddress += Length[Index];
    Index +=1;
  }

  //print message
  Serial.println("default pattern written");
}
//=============================================================================================================


